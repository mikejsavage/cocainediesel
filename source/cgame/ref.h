/*
Copyright (C) 1997-2001 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/
#pragma once

#include "qcommon/types.h"
#include "client/renderer/types.h"
#include "gameshared/q_math.h"

struct InterpolatedEntity {
	mat3_t axis;
	Vec3 origin, origin2;

	RGBA8 color;

	Vec3 scale;

	bool animating;
	float animation_time;
};

constexpr float srgb_to_linear_lut[ 256 ] = {
	0.0f,           0.000303526992f, 0.000607053982f, 0.000910580974f, 0.00121410796f, 0.00151763496f, 0.00182116194f, 0.00212468882f, 0.00242821592f, 0.00273174304f, 0.00303526992f, 0.00334653562f, 0.00367650692f, 0.00402471702f, 0.00439144206f, 0.00477695326f,
	0.00518151606f, 0.0056053917f,   0.00604883256f,  0.0065120901f,   0.0069954102f,  0.00749903172f, 0.00802319218f, 0.00856812484f, 0.00913405698f, 0.00972121768f, 0.010329823f,   0.0109600936f,  0.0116122448f,  0.012286487f,   0.0129830306f,  0.0137020806f,
	0.0144438408f,  0.0152085144f,   0.0159962922f,   0.0168073754f,   0.0176419522f,  0.0185002182f,  0.0193823576f,  0.0202885586f,  0.0212190096f,  0.0221738834f,  0.0231533646f,  0.0241576302f,  0.0251868572f,  0.0262412186f,  0.0273208878f,  0.0284260382f,
	0.0295568332f,  0.0307134408f,   0.0318960286f,   0.0331047624f,   0.0343398004f,  0.0356013104f,  0.036889445f,   0.0382043644f,  0.0395462252f,  0.0409151986f,  0.0423114114f,  0.0437350274f,  0.045186203f,   0.0466650836f,  0.048171822f,   0.0497065634f,
	0.051269468f,   0.0528606548f,   0.0544802808f,   0.0561284944f,   0.0578054338f,  0.0595112406f,  0.0612460562f,  0.063010022f,   0.06480328f,    0.0666259528f,  0.068478182f,   0.0703601092f,  0.0722718612f,  0.0742135792f,  0.0761853904f,  0.0781874284f,
	0.0802198276f,  0.0822827146f,   0.084376216f,    0.0865004658f,   0.088655591f,   0.0908417106f,  0.093058981f,   0.0953074842f,  0.097587362f,   0.0998987406f,  0.102241748f,   0.104616492f,   0.107023112f,   0.109461718f,   0.111932434f,   0.114435382f,
	0.116970674f,   0.119538434f,    0.122138776f,    0.124771818f,    0.127437696f,   0.13013649f,    0.132868334f,   0.13563335f,    0.138431624f,   0.141263306f,   0.144128486f,   0.147027284f,   0.149959802f,   0.152926162f,   0.155926466f,   0.158960834f,
	0.16202937f,    0.165132194f,    0.168269396f,    0.171441094f,    0.17464739f,    0.177888408f,   0.181164234f,   0.18447499f,    0.187820762f,   0.191201672f,   0.194617808f,   0.198069304f,   0.201556236f,   0.205078706f,   0.20863685f,    0.212230728f,
	0.21586053f,    0.219526232f,    0.223227978f,    0.22696589f,     0.23074007f,    0.234550596f,   0.238397584f,   0.242281138f,   0.246201396f,   0.25015837f,    0.254152178f,   0.258182914f,   0.262250722f,   0.266355664f,   0.270497858f,   0.274677366f,
	0.278894336f,   0.283148796f,    0.287440896f,    0.291770696f,    0.296138316f,   0.300543844f,   0.30498737f,    0.309468954f,   0.313988746f,   0.318546832f,   0.323143244f,   0.32777813f,    0.332451582f,   0.337163656f,   0.341914446f,   0.346704096f,
	0.351532638f,   0.356400162f,    0.361306786f,    0.366252602f,    0.371237784f,   0.376262218f,   0.38132611f,    0.386429518f,   0.391572564f,   0.396755308f,   0.401977866f,   0.407240302f,   0.4125427f,     0.417885154f,   0.423267752f,   0.428690552f,
	0.434153706f,   0.439657242f,    0.445201248f,    0.450785846f,    0.456411064f,   0.462077052f,   0.467783838f,   0.473531544f,   0.479320228f,   0.48514998f,    0.491020888f,   0.496933044f,   0.502886474f,   0.50888133f,    0.514917672f,   0.520995616f,
	0.527115226f,   0.533276498f,    0.539479614f,    0.54572457f,     0.55201149f,    0.55834049f,    0.56471163f,    0.571124912f,   0.577580512f,   0.58407849f,    0.590618908f,   0.597201884f,   0.603827416f,   0.610495626f,   0.617206634f,   0.623960436f,
	0.630757212f,   0.637596964f,    0.644479752f,    0.651405692f,    0.658374846f,   0.665387332f,   0.672443212f,   0.679542542f,   0.686685324f,   0.693871796f,   0.7011019f,     0.708375812f,   0.715693534f,   0.723055244f,   0.730460882f,   0.737910568f,
	0.745404362f,   0.752942324f,    0.76052463f,     0.768151284f,    0.775822342f,   0.783537924f,   0.791298032f,   0.799102842f,   0.806952358f,   0.814846694f,   0.822785854f,   0.830769956f,   0.838799118f,   0.846873284f,   0.854992688f,   0.863157272f,
	0.871367216f,   0.87962234f,     0.887923182f,    0.896269262f,    0.904661238f,   0.913098574f,   0.921581924f,   0.930110872f,   0.938685774f,   0.947306574f,   0.955973506f,   0.964686274f,   0.973445476f,   0.982250572f,   0.991102218f,   1.0f,
};

constexpr Vec4 sRGBToLinearCT( RGBA8 srgb ) {
	return Vec4(
		srgb_to_linear_lut[ srgb.r ],
		srgb_to_linear_lut[ srgb.g ],
		srgb_to_linear_lut[ srgb.b ],
		Dequantize01( srgb.a )
	);
}

struct MultiTypeColor {
	const RGBA8 srgb;
	const Vec4 linear;

	constexpr MultiTypeColor( u8 r, u8 g, u8 b, u8 a = 255 ) :
		srgb( r, g, b, a ),
		linear( sRGBToLinearCT( srgb ) ) { }
};

constexpr MultiTypeColor diesel_green( 44, 209, 89 );
constexpr MultiTypeColor diesel_grey( 128, 128, 128 );
constexpr MultiTypeColor diesel_red( 255, 0, 57 );
constexpr MultiTypeColor diesel_yellow( 255, 204, 38 );

constexpr MultiTypeColor white( 255, 255, 255 );
constexpr MultiTypeColor black( 0, 0, 0 );
constexpr MultiTypeColor dark( 1, 1, 1 );
constexpr MultiTypeColor red( 255, 0, 0 );
constexpr MultiTypeColor green( 0, 255, 0 );
constexpr MultiTypeColor yellow( 255, 255, 0 );
